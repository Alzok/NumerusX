import asyncio
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import sys
import os
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional, Union

# Ajouter le r√©pertoire parent au chemin pour pouvoir importer les modules
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.strategy_framework import Strategy, Signal, SignalType, BacktestEngine
from app.strategy_evaluator import StrategyEvaluator
from app.strategy_debug import StrategyDebugger

class SimpleRSIStrategy(Strategy):
    """Strat√©gie simple bas√©e sur l'indicateur RSI."""
    
    def __init__(self, name: str, timeframes: List[str], params: Dict[str, Any] = None):
        """
        Initialise la strat√©gie RSI.
        
        Args:
            name: Nom de la strat√©gie
            timeframes: Liste des timeframes
            params: Param√®tres optionnels
        """
        # Param√®tres par d√©faut
        default_params = {
            "period": 14,       # P√©riode du RSI
            "overbought": 70,   # Niveau de surachat
            "oversold": 30,     # Niveau de survente
            "exit_rsi": 50      # Niveau de sortie
        }
        
        # Fusionner avec les param√®tres personnalis√©s
        actual_params = default_params.copy()
        if params:
            actual_params.update(params)
            
        super().__init__(name, timeframes, actual_params)
        
    async def generate_signal(self, token_address: str, price_data: pd.DataFrame, timeframe: str) -> Signal:
        """
        G√©n√®re un signal bas√© sur le RSI.
        
        Args:
            token_address: Adresse du token
            price_data: Donn√©es de prix
            timeframe: Intervalle de temps
            
        Returns:
            Signal g√©n√©r√©
        """
        # V√©rifier que nous avons suffisamment de donn√©es
        if len(price_data) < self.params["period"] + 5:
            return Signal(
                type=SignalType.NEUTRAL,
                confidence=0.5,
                timestamp=datetime.now().timestamp(),
                token_address=token_address,
                timeframe=timeframe,
                strategy_name=self.name,
                metadata={"reason": "Insufficient data"}
            )
        
        # Calculer le RSI
        rsi = self._calculate_rsi(price_data['close'], self.params["period"])
        
        # Obtenir le RSI actuel et pr√©c√©dent
        current_rsi = rsi[-1]
        previous_rsi = rsi[-2]
        
        # Obtenir le prix actuel
        current_price = price_data['close'].iloc[-1]
        
        # Logique de signal
        signal_type = SignalType.NEUTRAL
        confidence = 0.5
        metadata = {
            "rsi": current_rsi,
            "previous_rsi": previous_rsi,
            "current_price": current_price
        }
        
        # Signal d'achat: RSI passe au-dessus du niveau de survente
        if previous_rsi < self.params["oversold"] and current_rsi >= self.params["oversold"]:
            signal_type = SignalType.BUY
            confidence = 0.7 + min(0.2, (self.params["oversold"] - previous_rsi) / 100)
            
            # Calculer les niveaux de stop-loss et take-profit
            stop_loss = current_price * 0.97  # 3% en dessous du prix actuel
            take_profit = current_price * 1.06  # 6% au-dessus du prix actuel
            
            return Signal(
                type=signal_type,
                confidence=confidence,
                timestamp=datetime.now().timestamp(),
                token_address=token_address,
                timeframe=timeframe,
                strategy_name=self.name,
                metadata=metadata,
                stop_loss=stop_loss,
                take_profit=take_profit
            )
            
        # Signal de vente: RSI passe en dessous du niveau de surachat
        elif previous_rsi > self.params["overbought"] and current_rsi <= self.params["overbought"]:
            signal_type = SignalType.SELL
            confidence = 0.7 + min(0.2, (previous_rsi - self.params["overbought"]) / 100)
            
            # Calculer les niveaux de stop-loss et take-profit
            stop_loss = current_price * 1.03  # 3% au-dessus du prix actuel
            take_profit = current_price * 0.94  # 6% en dessous du prix actuel
            
            return Signal(
                type=signal_type,
                confidence=confidence,
                timestamp=datetime.now().timestamp(),
                token_address=token_address,
                timeframe=timeframe,
                strategy_name=self.name,
                metadata=metadata,
                stop_loss=stop_loss,
                take_profit=take_profit
            )
        
        # Pas de nouveau signal
        return Signal(
            type=SignalType.NEUTRAL,
            confidence=confidence,
            timestamp=datetime.now().timestamp(),
            token_address=token_address,
            timeframe=timeframe,
            strategy_name=self.name,
            metadata=metadata
        )
        
    def _calculate_rsi(self, prices: pd.Series, period: int = 14) -> np.ndarray:
        """
        Calcule l'indicateur RSI.
        
        Args:
            prices: S√©rie de prix
            period: P√©riode du RSI
            
        Returns:
            Valeurs du RSI
        """
        # Calculer les variations
        deltas = np.diff(prices)
        seed = deltas[:period+1]
        
        # Calculer les gains et pertes
        up = seed[seed > 0].sum() / period
        down = -seed[seed < 0].sum() / period
        
        if down == 0:  # √âviter la division par z√©ro
            down = 0.00001
        
        rs = up / down
        rsi = np.zeros_like(prices)
        rsi[:period] = 100. - 100. / (1. + rs)
        
        # Calculer le RSI pour les valeurs restantes
        for i in range(period, len(prices)):
            delta = deltas[i-1]  # Diff√©rence avec le prix pr√©c√©dent
            
            if delta > 0:
                upval = delta
                downval = 0.
            else:
                upval = 0.
                downval = -delta
                
            # Moyenne mobile exponentielle des gains/pertes
            up = (up * (period - 1) + upval) / period
            down = (down * (period - 1) + downval) / period
            
            if down == 0:  # √âviter la division par z√©ro
                down = 0.00001
                
            rs = up / down
            rsi[i] = 100. - 100. / (1. + rs)
            
        return rsi

def generate_sample_data(days: int = 100) -> pd.DataFrame:
    """
    G√©n√®re des donn√©es de prix synth√©tiques pour les tests.
    
    Args:
        days: Nombre de jours de donn√©es
        
    Returns:
        DataFrame contenant les donn√©es OHLCV
    """
    np.random.seed(42)  # Pour reproductibilit√©
    
    # G√©n√©rer une marche al√©atoire pour le prix
    base_price = 100
    returns = np.random.normal(0.0005, 0.02, days * 24)  # Donn√©es horaires
    price_movement = np.cumprod(1 + returns)
    prices = base_price * price_movement
    
    # Cr√©er une liste de dates horaires
    end_date = datetime.now()
    start_date = end_date - timedelta(days=days)
    dates = pd.date_range(start=start_date, end=end_date, periods=len(prices))
    
    # G√©n√©rer open, high, low, close √† partir du prix moyen
    data = []
    for i, price in enumerate(prices):
        # Ajouter de la variation intra-p√©riode
        open_price = price * (1 + np.random.normal(0, 0.003))
        close_price = price * (1 + np.random.normal(0, 0.003))
        high_price = max(open_price, close_price) * (1 + abs(np.random.normal(0, 0.004)))
        low_price = min(open_price, close_price) * (1 - abs(np.random.normal(0, 0.004)))
        volume = abs(np.random.normal(1000000, 500000))
        
        data.append([dates[i], open_price, high_price, low_price, close_price, volume])
    
    # Cr√©er le DataFrame
    df = pd.DataFrame(data, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    df.set_index('timestamp', inplace=True)
    
    return df

async def run_strategy_example():
    """
    Ex√©cute un exemple complet de la strat√©gie RSI.
    """
    print("üöÄ D√©marrage de l'exemple de strat√©gie RSI...")
    
    # G√©n√©rer des donn√©es synth√©tiques
    hourly_data = generate_sample_data(days=30)
    print(f"üìä Donn√©es g√©n√©r√©es: {len(hourly_data)} points OHLCV horaires")
    
    # Cr√©er la strat√©gie RSI avec des param√®tres personnalis√©s
    strategy = SimpleRSIStrategy(
        name="RSI_30_70",
        timeframes=["1h"],
        params={
            "period": 14,
            "overbought": 70,
            "oversold": 30,
        }
    )
    
    # Format du prix pour l'affichage
    price_data = {"1h": hourly_data}
    token_address = "SAMPLE_TOKEN_123"
    
    # 1. G√©n√©rer quelques signaux
    print("\nüì° G√©n√©ration de signaux sur diff√©rentes p√©riodes...")
    signals = []
    
    # Prendre quelques fen√™tres de temps pour l'analyse
    windows = [
        int(len(hourly_data) * 0.5),
        int(len(hourly_data) * 0.7),
        int(len(hourly_data) * 0.8),
        int(len(hourly_data) * 0.9),
        len(hourly_data)
    ]
    
    for i in windows:
        window = hourly_data.iloc[:i]
        signal = await strategy.generate_signal(token_address, window, "1h")
        signals.append(signal)
        
        print(f"  ‚Ü≥ Point {i:3d}: Signal {signal.type.value.upper():8s} (confidence: {signal.confidence:.2f}), RSI: {signal.metadata['rsi']:.1f}")
    
    # 2. Ex√©cuter un backtest complet
    print("\n‚öôÔ∏è Ex√©cution du backtest...")
    backtest_engine = BacktestEngine()
    result = await backtest_engine.run_backtest(strategy, price_data, token_address)
    
    trades = result.get("trades", [])
    
    print(f"  ‚Ü≥ {len(trades)} trades ex√©cut√©s")
    print(f"  ‚Ü≥ ROI total: {result['metrics'].get('total_roi', 0):.2f}%")
    print(f"  ‚Ü≥ Win rate: {result['metrics'].get('win_rate', 0) * 100:.1f}%")
    print(f"  ‚Ü≥ Profit factor: {result['metrics'].get('profit_factor', 0):.2f}")
    
    # 3. √âvaluer avec le module d'√©valuation
    print("\nüìä G√©n√©ration du rapport d'√©valuation...")
    evaluator = StrategyEvaluator(output_dir="example_results")
    evaluation = await evaluator.evaluate_strategy(strategy, price_data, token_address)
    
    report_path = evaluator.generate_report(evaluation)
    print(f"  ‚Ü≥ Rapport g√©n√©r√©: {report_path}")
    
    # 4. D√©boguer la strat√©gie
    print("\nüîç D√©bogage de la strat√©gie...")
    debugger = StrategyDebugger(output_dir="example_debug")
    debug_result = await debugger.debug_strategy(strategy, price_data, token_address)
    
    analysis = debugger.analyze_strategy_problems(debug_result)
    
    # Afficher les recommandations
    print("\nüìù Recommandations d'am√©lioration:")
    for i, recommendation in enumerate(analysis["recommendations"], 1):
        print(f"  {i}. {recommendation}")
    
    print("\n‚úÖ Exemple termin√© ! Explorez les r√©sultats dans les dossiers 'example_results' et 'example_debug'.")

# Ex√©cuter l'exemple si le script est ex√©cut√© directement
if __name__ == "__main__":
    asyncio.run(run_strategy_example())