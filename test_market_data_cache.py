#!/usr/bin/env python3
"""
Test script pour MarketDataCache - V√©rification C16.
Teste que la d√©pendance circulaire est r√©solue.
"""

import asyncio
import logging
from app.services.market_data_cache import MarketDataCache, create_market_data_cache
from app.security.security import SecurityChecker
from app.config import get_config

# Configuration logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_market_data_cache_basic():
    """Test basique de MarketDataCache."""
    print("\nüîç TEST 1: MarketDataCache fonctionnalit√© basique")
    
    config = get_config()
    cache = MarketDataCache(config)
    
    async with cache:
        # Test token Solana connu (SOL)
        sol_mint = "So11111111111111111111111111111111111111112"
        
        print(f"üìä Test r√©cup√©ration info token: {sol_mint}")
        token_info = await cache.get_token_info(sol_mint)
        print(f"R√©sultat: {token_info}")
        
        print(f"üí∞ Test r√©cup√©ration prix: {sol_mint}")
        price_info = await cache.get_token_price(sol_mint)
        print(f"R√©sultat: {price_info}")
        
        print(f"üíß Test r√©cup√©ration liquidit√©: {sol_mint}")
        liquidity_info = await cache.get_liquidity_data(sol_mint)
        print(f"R√©sultat: {liquidity_info}")
        
        print("‚úÖ Test MarketDataCache basique termin√©")

async def test_security_checker_independence():
    """Test que SecurityChecker fonctionne avec MarketDataCache."""
    print("\nüîí TEST 2: SecurityChecker avec MarketDataCache ind√©pendant")
    
    config = get_config()
    cache = MarketDataCache(config)
    
    async with cache:
        # Cr√©er SecurityChecker avec le cache
        security_checker = SecurityChecker(
            db_path=":memory:",  # Base SQLite en m√©moire pour test
            market_data_cache=cache
        )
        
        # Test token Solana
        sol_mint = "So11111111111111111111111111111111111111112"
        
        print(f"üîê Test validation s√©curit√© token: {sol_mint}")
        is_safe, risks = await security_checker.check_token_security(sol_mint)
        
        print(f"Token s√ªr: {is_safe}")
        print(f"Risques d√©tect√©s: {len(risks)}")
        for risk in risks:
            print(f"  - {risk.risk_type}: {risk.description} (severity: {risk.severity})")
        
        # Fermer SecurityChecker
        security_checker.close()
        
        print("‚úÖ Test SecurityChecker ind√©pendant termin√©")

async def test_cache_performance():
    """Test performance cache Redis."""
    print("\n‚ö° TEST 3: Performance cache Redis")
    
    config = get_config()
    cache = MarketDataCache(config)
    
    async with cache:
        sol_mint = "So11111111111111111111111111111111111111112"
        
        # Premier appel (miss cache)
        import time
        start = time.time()
        result1 = await cache.get_token_price(sol_mint)
        first_call = time.time() - start
        
        # Deuxi√®me appel (hit cache)
        start = time.time()
        result2 = await cache.get_token_price(sol_mint)
        second_call = time.time() - start
        
        print(f"Premier appel (miss): {first_call:.3f}s")
        print(f"Deuxi√®me appel (hit): {second_call:.3f}s")
        print(f"Acc√©l√©ration cache: {first_call/second_call:.1f}x")
        
        # Stats cache
        stats = await cache.get_cache_stats()
        print(f"Stats cache: {stats}")
        
        print("‚úÖ Test performance cache termin√©")

async def test_no_circular_dependency():
    """Test qu'il n'y a plus de d√©pendance circulaire."""
    print("\nüîÑ TEST 4: V√©rification absence d√©pendance circulaire")
    
    try:
        # MarketDataCache n'importe pas MarketDataProvider ou TradingEngine
        from app.services.market_data_cache import MarketDataCache
        
        # SecurityChecker utilise MarketDataCache (pas MarketDataProvider)
        from app.security.security import SecurityChecker
        
        # Pas d'import crois√© possible
        config = get_config()
        cache = MarketDataCache(config)
        
        # SecurityChecker peut √™tre instanci√© ind√©pendamment
        security = SecurityChecker(
            db_path=":memory:",
            market_data_cache=cache
        )
        
        print("‚úÖ Aucune d√©pendance circulaire d√©tect√©e")
        print("‚úÖ SecurityChecker peut √™tre cr√©√© ind√©pendamment")
        print("‚úÖ MarketDataCache n'a pas de d√©pendances vers TradingEngine")
        
        security.close()
        
    except ImportError as e:
        print(f"‚ùå Erreur import (d√©pendance circulaire?): {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erreur inattendue: {e}")
        return False
    
    return True

async def main():
    """Fonction principale de test."""
    print("üöÄ Tests MarketDataCache - R√©solution D√©pendance Circulaire (C16)")
    print("=" * 70)
    
    try:
        # Test 1: Fonctionnalit√©s basiques
        await test_market_data_cache_basic()
        
        # Test 2: Int√©gration SecurityChecker
        await test_security_checker_independence()
        
        # Test 3: Performance cache
        await test_cache_performance()
        
        # Test 4: V√©rification d√©pendance circulaire
        no_circular = await test_no_circular_dependency()
        
        print("\n" + "=" * 70)
        print("üìä R√âSUM√â TESTS C16")
        print("=" * 70)
        print("‚úÖ MarketDataCache cr√©√© et fonctionnel")
        print("‚úÖ SecurityChecker utilise MarketDataCache")
        print("‚úÖ Cache Redis am√©liore performance")
        print(f"{'‚úÖ' if no_circular else '‚ùå'} D√©pendance circulaire r√©solue")
        print("\nüéØ T√ÇCHE C16 TERMIN√âE - D√©pendance circulaire cass√©e!")
        
    except Exception as e:
        print(f"\n‚ùå ERREUR pendant les tests: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main()) 